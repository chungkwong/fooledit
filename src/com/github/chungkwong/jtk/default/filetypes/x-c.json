{
	"states":{"init":0},
	"shorthands":["char","[^\\\\'\"\\r\\n]|\\\\([ntvbrfa?'\"\\\\]|x[0-9a-fA-F]+|[0-7]{1,3})"],
	"rules":[
		{"old state":"init","new state":"init","type":"keyword","regex":"auto|break|case|char|const|continue|default|double|do|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while"},
		{"old state":"init","new state":"init","type":"comment","regex":"//[^\\r\\n]*|/\\*([^*]|\\*+[^*/])*\\*+/"},
		{"old state":"init","new state":"init","type":"whitespace","regex":"\\s+"},
		{"old state":"init","new state":"init","type":"char","regex":"L?'(\"|{char})'"},
		{"old state":"init","new state":"init","type":"string","regex":"L?\"('|{char})*\""},
		{"old state":"init","new state":"init","type":"name","regex":"[_a-zA-Z][_0-9a-zA-Z]*"},
		{"old state":"init","new state":"init","type":"float","regex":"([0-9]+\\.[0-9]*|\\.[0-9]+)([eE][-+]?[0-9]+)?[lLfF]?"},
		{"old state":"init","new state":"init","type":"float","regex":"[0-9]+[eE][-+]?[0-9]+[lLfF]?"},
		{"old state":"init","new state":"init","type":"integer","regex":"(0[xX][0-9a-fA-F]+|[1-9][0-9]*|0[0-7]*)[lL]?"},
		{"old state":"init","new state":"init","type":"other","regex":"<<=|>>=|->|<<|>>|&&|\\|\\||\\+\\+|--|[-+*/%<>!=^&]?=|[-+!~/%,;<>?:\\&\\*\\.\\(\\)\\[\\]\\{\\}\\|=^]"},
		{"old state":"init","new state":"init","type":"directive","regex":"^\\s*#\\s*(define|undef|include|line|error|pragma|ifdef|ifndef|if|elif|else|endif)"}
	]
}
