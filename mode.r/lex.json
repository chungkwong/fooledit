{
    "states":{"init":0},
    "shorthands":["escape","\\\\([bdfnrtv'\"\\\\]|x[0-9a-fA-F]{1,2}|u\\{[0-9a-fA-F]{1,4}\\}|u[0-9a-fA-F]{1,4}|U\\{[0-9a-fA-F]{1,8}\\}|U[0-9a-fA-F]{1,8}|[0-7]{1,3})"],
    	"rules":[
		{"old state":"init","new state":"init","type":"keyword","regex":"if|else|repeat|while|function|for|in|next|break|\\.\\.(\\.|[0-9]+)"},
	    {"old state":"init","new state":"init","type":"null","regex":"NA(_integer_|_real_|_complex_|_character_)?|NULL|Inf|NaN"},
	    {"old state":"init","new state":"init","type":"boolean","regex":"TRUE|FALSE"},
	    {"old state":"init","new state":"init","type":"float","regex":"([0-9]+\\.[0-9]*|\\.[0-9]+)([eE][-+]?[0-9]+)?L?i?"},
	    {"old state":"init","new state":"init","type":"float","regex":"[0-9]+[eE][-+]?[0-9]+L?i?"},
	    {"old state":"init","new state":"init","type":"float","regex":"0[xX]([0-9a-fA-F]+(\\.[0-9a-fA-F]*)?|\\.[0-9a-fA-F]+)[pP][-+]?[0-9]+L?i?"},
		{"old state":"init","new state":"init","type":"float","regex":"(0[xX][0-9a-fA-F]+|0[0-7]*|[1-9][0-9]*)L?i?"},
		{"old state":"init","new state":"init","type":"string","regex":"\"([^\"\\\\]|{escape})*\"|'([^'\\\\]|{escape})*'"},
		{"old state":"init","new state":"init","type":"name","regex":"[a-zA-Z\\.][_0-9a-zA-Z\\.]*"},
		{"old state":"init","new state":"init","type":"whitespace","regex":"\\s+"},
	    {"old state":"init","new state":"init","type":"other","regex":"%[^%]*%|[<>=!]=|::|->{1,2}|<{1,2}-|\\[\\[|\\]\\]|[-+*/^!<>~=:\\&\\|\\(\\)\\[\\]\\{\\}\\$@;,]"},
		{"old state":"init","new state":"init","type":"comment","regex":"#.*?$"}
	]
}
