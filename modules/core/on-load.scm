(import (java))
(invoke-static 'cc.fooledit.core.CoreModule 'onLoad)
(let ((types (get-registry "core/provider/core/data_object_type")))
     (set-entry! types "cc.fooledit.editor.filesystem.FileSystemObjectType" "editor.filesystem")
     (set-entry! types "cc.fooledit.editor.terminal.TerminalObjectType" "editor.terminal")
     (set-entry! types "cc.fooledit.editor.browser.BrowserObjectType" "editor.browser")
     (set-entry! types "cc.fooledit.editor.zip.ZipObjectType" "editor.zip")
     (set-entry! types "cc.fooledit.editor.zip.ArchiveObjectType" "editor.zip")
     (set-entry! types "cc.fooledit.editor.binary.BinaryObjectType" "editor.binary")
     (set-entry! types "cc.fooledit.editor.text.TextObjectType" "editor.text")
     (set-entry! types "cc.fooledit.editor.image.ImageObjectType" "editor.image")
     (set-entry! types "cc.fooledit.editor.media.MediaObjectType" "editor.media"))
(let ((editors (get-registry "core/provider/core/data_object_editor")))
     (set-entry! editors "cc.fooledit.editor.filesystem.FileSystemObject" "editor.filesystem")
     (set-entry! editors "cc.fooledit.editor.terminal.TerminalObject" "editor.terminal")
     (set-entry! editors "cc.fooledit.editor.browser.TerminalObject" "editor.browser")
     (set-entry! editors "cc.fooledit.editor.zip.ArchiveObject" "editor.zip")
     (set-entry! editors "cc.fooledit.editor.zip.ZipObject" "editor.zip")
     (set-entry! editors "cc.fooledit.editor.binary.BinaryObject" "editor.binary")
     (set-entry! editors "cc.fooledit.editor.text.TextObject" "editor.text")
     (set-entry! editors "cc.fooledit.editor.image.ImageObject" "editor.image")
     (set-entry! editors "cc.fooledit.editor.media.MediaObject" "editor.text")
     (set-entry! editors "cc.fooledit.editor.media.MediaObject" "editor.media"))
(let ((apps (get-registry "core/provider/core/application")))
     (set-entry! apps "filesystem" "editor.filesystem")
     (set-entry! apps "terminal" "editor.terminal")
     (set-entry! apps "browser" "editor.browser"))
(let ((mimes (get-registry "core/provider/core/content_type_loader")))
     (set-entry! mimes "fooledit/directory" "editor.filesystem")
     (set-entry! mimes "fooledit/terminal" "editor.terminal")
     (set-entry! mimes "fooledit/browser" "editor.browser"))
(let ((commands (get-registry "core/provider/core/command")))
     (set-entry! commands "terminal" "editor.terminal")
     (set-entry! commands "browser" "editor.browser"))
